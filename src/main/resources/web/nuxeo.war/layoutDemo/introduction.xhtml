<ui:composition template="global_page_template.xhtml"
  xmlns:h="http://java.sun.com/jsf/html"
  xmlns:ui="http://java.sun.com/jsf/facelets">

  <ui:define name="content">
  
    <h3>Welcome to the Nuxeo Layout Showcase!</h3>
  
    <div class="mainContent">
    
      <div>
        This site presents standard widget types available to the Nuxeo layout service,
        and can be used as a demo, reference and preview application.
        <br />
        You can browse widget types by clicking on items in the left menu.
      </div>
      <br />

      <div>
        Other useful links:
        <ul>
          <li>
            <a href="https://doc.nuxeo.com/x/OoAO" target="_blank">
              Layouts developer documentation
            </a>
          </li>
          <li>
            <a href="http://community.nuxeo.com/api/nuxeo/5.4/tlddoc/" target="_blank">
              Nuxeo JSF tag library documentation
            </a>
          </li>
        </ul>
      </div>
      <br />

    </div>
    
    <div class="foldableLightBox">
    
      <h3 class="folded">
        <a href="#nogo" onclick="return toggleBox(this)">
          <h:outputText value="About this site" />
        </a>
      </h3>
    
      <div class="boxBody" style="overflow: visible; display: none;">
    
        <div>
          The idea of this application came with
          <a href="http://www.nuxeo.com/en/products/studio" target="_blank">Studio integration</a>,
          as widget types configuration needed to be made user friendly by:
          <ul>
            <li>
              providing a library of available widget types, taking care of
              the widget accepted field type (String, Boolean, Integer....);
            </li>
            <li>
              making it possible to set the widget properties using a form;
            </li>
            <li>
              making it possible to preview the resulting widget.
            </li>
          </ul>
        </div>
        <br />

        <div>
          So the widget type definition was improved to hold configuration
          instructions (title, description, definition of field types that match
          the widget type...).
        </div>
        <br />

        <div>
          To describe the available properties depending on the mode, as well as
          the form to display them, layouts were the natural choice. So the widget
          type definition was modified to accept standard layout definitions, with
          widgets using the property name as a field.  
        </div>
        <br />

        <div>
          Using this way of describing a widget type is also a good maintenance tool:
          the information is kept in XML format, accepting HTML rendering for the
          description. It can be used directly to generate pages like the
          reference page or preview forms on this showcase application (using the
          standard JSF implementation of layouts).
          <br />
          It can also be exported in JSON format for Nuxeo Studio, as it accepts
          widget types as JSON contributions and uses them to fill its registries.
          A specific GWT implementation of layouts has been implemented for this
          purpose. 
        </div>
        <br />

        <div>
          A webengine application has also been added to the default Nuxeo platform
          (since version 5.4.2) so that you can get the list of available widget types
          on your Nuxeo instance, as well as some configuration details when they have
          been filled. This application is visible at http://localhost:8080/nuxeo/site/layout.
          <br />
          These pages do not show the widget properties as there is no Freemarker
          implementation of layouts - yet ;-).
        </div>
        <br />

        <div>
          You can read more about how to setup a custom widget type definition at:
          <a href="https://doc.nuxeo.com/x/uwY7" target="_blank">
          http://doc.nuxeo.com/display/NXDOC/Custom+widget+types</a>.
        </div>
        <br />

      </div>
        
    </div>    
    
  </ui:define>

</ui:composition>